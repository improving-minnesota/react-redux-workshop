section
  h1 Forms

section
  p Form fields hold internal state from user interactions
  script(type="text/plain", class="language-jsx").
    <form>
      <label>
        Name:
        <input type="text" name="name" />
      </label>
      <input type="submit" value="Submit" />
    </form>

section
  p Form components allow listening for changes
  ul
    li Set a callback to the <span class="component red">onChange</span> prop
    li The callback fires when:
      ul
        li The value changes (every keystroke)
        li Checked state changes (checkbox)
        li Selected value changes (select dropdown)
  script(type="text/plain", class="language-jsx").
    <input type="text" name="name" onChange={this.onNameChange} />

section
  h2 Controlled vs Uncontrolled Components

section
  h3 Uncontrolled Components
  ul
    li State and display are managed outside React
    li React can be notified when it changes

  script(type="text/plain", class="language-jsx").
    onCityChange(event) {
      console.log(`Value changed to ${event.target.value}`);
    }

    <input type="text" onChange={this.onCityChange} />

section
  h3 Controlled Components
  ul
    li React controls state and display
    li Value of the rendered element will always reflect the <span class="component red">value</span> prop
    li Allows for setting initial state, overriding/transforming changes
  script(type="text/plain", class="language-jsx").
    handleCityChange(event) {
      this.setState({city: {value: event.target.value}});
    }

    <input type="text" value={this.state.city.value}
           onChange={this.handleCityChange} />

section
  h3 Forms are hard
  ul
    li Inherently working with user-supplied (dangerous!) data
    li Need to pre-populate, auto-format, validate, marshal data
    li Error handling is tricky
    li Dynamic aspects are hard to manage manually

section
  h3 What do we do?
  p You can do all of your forms manually if you want
  p Highly recommend using a third-party library
  p Lots of options, simple (basic) to complex (highly capable)

section
  a(href="https://github.com/jaredpalmer/formik", target="_blank", rel="noopener")
    img(src="~./images/formik.png")

section
  h2 Formik

  script(type="text/plain", class="language-jsx").
    <Formik
      initialValues={{ firstName: 'Bob' }}
      validate={validate}
      onSubmit={submit}
      render={({ values, errors, handleChange }) => (
        <form>
          <input 
            type="text" 
            name="firstName" 
            value={values.firstName} 
            onChange={handleChange} />
          {errors.firstName && <div className="error">{errors.firstName}</div>}

          <button type="submit">Submit</button>
        </form>
      )}
    />

section
  h2 Formik
  p Helper functions to make the controlled inputs less verbose

  script(type="text/plain", class="language-jsx").
    <Formik
      initialValues={{ firstName: 'Bob' }}
      validate={validate}
      onSubmit={submit}
      render={() => (
        <Form>
          <Field type="text" name="firstName" />
          <ErrorMessage name="firstName" className="error" component="div" />
          <button type="submit">Submit</button>
        </Form>
      )}
    />


section
  h2 Formik Validation
  ul
    li Validate the whole form when any field changes
    li Sends any validation failures back to form

section
  h3 Formik Validation - Manual
  script(type="text/plain", class="language-jsx").
    const validate = (values) => {
      const errors = {};
      if (!values.firstName) {
        errors.firstName = 'Required!';
      }
      return errors;
    };

    <Formik
      ...
      validate={validate}
    >

section
  h2 Formik Validation - Yup
  ul
    li Yup is a JavaScript object schema validator and object parser
    li Easy to configure common validation rules(required, min, max, etc.)

section
  h3 Formik Validation - Yup
  script(type="text/plain", class="language-jsx").

    const validationSchema = Yup.object().shape({
      firstName: Yup.string().required('Required!')
    });

    <Formik
      ...
      validationSchema={validationSchema}
    >

section
  h3 Formik State
  p Formik handles tracking form values for us
  p We'll get a copy of all values on validation & submission

  script(type="text/plain", class="language-jsx").
    const submit = (values) => {
      // Do stuff to submit the form here
    };

    <Formik
      ...
      onSubmit={submit}
    >

section
  h3 Other libraries

section
  h2 Redux Form
  a(href="https://github.com/erikras/redux-form", target="_blank", rel="noopener")
    img(src="~./images/redux-form.png")

section
  a(href="https://github.com/final-form/react-final-form", target="_blank", rel="noopener")
    img(src="~./images/react-final-form.png")

section
  h3 Choose what you like best
  h4 Or no library!
  p One popular opinion:
  blockquote(cite="Dan Abramov") [form state] is inherently ephemeral and local, so tracking it in Redux (or any kind of Flux library) is unnecessary

section
  h1
    a(href="/labs/forms-and-validation") Lab 5
  h2 React Form Validation
