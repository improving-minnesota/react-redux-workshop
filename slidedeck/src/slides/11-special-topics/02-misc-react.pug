section
  h2 Miscellaneous React Features

section
  h3 React.Fragment
  p A JSX expression must have a single top-level element

  script(type="text/plain", class="language-jsx").
    const App = () => {
      return (
        <h1>Hello World</h1>
        <h2>Another one</h2>
      );
    }
  small (This is not ok, two top-level elements)

section
  h3 React.Fragment
  p Common fix is to use a wrapper div, but that bloats the DOM
  p Fragment is a transparent component that just renders its children, no wrapper element in the DOM
  script(type="text/plain", class="language-jsx").
    const App = () => {
      return (
        <React.Fragment>
          <h1>Hello World</h1>
          <h2>Another one</h2>
        </React.Fragment>
      );
    }

section
  h3 React.createRef

  script(type="text/plain", class="language-jsx").
    class Hello extends React.Component {
      inputRef = React.createRef();

      componentDidMount() {
        this.inputRef.current.focus();
      }

      render() {
        return <input type={text} ref={this.inputRef} />
      }
    }

section
  h3 ReactDOM.createPortal(child, container)

  script(type="text/plain", class="language-jsx").
    class Tooltip extends React.Component {
      render() {
        return ReactDOM.createPortal(
          this.props.children,
          document.getElementById('tooltip')
        );
      }
    }

section
  h2 Advanced Async Patterns

section
  h3 React.Suspense
  p Special component that can render a fallback until a child is finished doing something
  ul
    li Loading spinner while loading data
    li Progressive enhancement during feature/support checks
    li Code-splitting

section
  h3 React.lazy
  p Lazy is a hint to delay get/run of resources until needed by React
  p Ideal for:
  ul
    li Async data fetching
    li On-demand download of portions of your app (code-splitting)

section
  h3 Code Splitting
  p Results in multiple bundles: one for the "base" application, others are loaded on-demand as the user moves around

  script(type="text/plain", class="language-jsx").
    const LazyAdminSection = React.lazy(() => import('./adminSection.jsx'));

    export const AsyncAdminSection = props => (
      <React.Suspense fallback={<LoadingSpinner />}>
        <LazyAdminSection {...props} />
      </React.Suspense>
    );

section
  h2 Render got you down?

section
  h3 Re-rendering
  p
  ul
    li Most components re-render anytime a prop or state update occurs
    li You can control whether "render" is called, but it's tricky sometimes

section
  h3 Optimizing re-render
  ul
    li shouldComponentUpdate
      br
      small Optionally abort re-render
      script(type="text/plain", class="language-jsx").
        shouldComponentUpdate(nextProps) {
          return this.props !== nextProps;
        }
    li React.PureComponent
      br
      small Use shallow prop/state comparison to decide
      script(type="text/plain", class="language-jsx").
        class MyComponent extends React.PureComponent { ... }
    li React.memo()
      br
      small Same, but for functional components
      script(type="text/plain", class="language-jsx").
        const MemoizedComponent = React.memo((props) => { ... });

section
  h3 Guidelines for Optimized Render
  ul
    li Don't prematurely optimize - React is already super efficient
    li See whether your render function is doing work it doesn't need to
    li Render optimizations should start at leaf nodes and work upwards
    li These are optimizations only, they are not guaranteed to always prevent a render
