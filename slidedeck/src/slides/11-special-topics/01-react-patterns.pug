section
  h2 React Patterns

section
  h3 There are a lot of design patterns in React
  p React flexibility ===> anything can be a 'pattern'

section
  h3 Higher-order component

  blockquote Concretely, a higher-order component is a function that takes a component and returns a new component.
  p Think of it as a wrapper that adds/changes behavior

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';

    const Displayer = ({ a, b, c }) => (
      <p>{a} & {b} & {c}</p>
    );

    const Doubler = (WrappedComponent) => {
      return (props) => {
        // Double any numeric prop being passed through this HOC
        const doubledProps = Object.entries(props)
          .reduce((acc, entry) => {
            acc[entry[0]] = (typeof entry[1] === 'number') ? entry[1] * 2 : entry[1];
            return acc;
          }, {});
        // Output wrapped component with doubled props plus give it an extra one
        return <WrappedComponent {...doubledProps} c={999} />
      };
    };

    export const DoubledDisplayer = Doubler(Displayer);
    ...
    <DoubledDisplayer a={5} b={7} />

section
  h3 Render props

  blockquote The term “render prop” refers to a simple technique for sharing code between React components using a prop whose value is a function.

  script(type="text/plain", class="language-jsx").
    <MouseTracker>
      ({ position }) => (
        <p>Mouse is at {position.x} by {position.y}</p>
      )
    </MouseTracker>

section
  h3 Visibility
  p Preventing render of a component can be a parent or child concern

  script(type="text/plain", class="language-jsx").
    <div>
      {showMyComponent && <MyComponent />}
      <MyComponent visible={showMyComponent} />
    </div>