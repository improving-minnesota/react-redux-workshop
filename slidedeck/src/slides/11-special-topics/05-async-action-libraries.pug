section
  h2 Redux Async Action Libraries

section
  h3 Lots of options
  ul
    li redux-thunk
    li redux-saga
    li redux-promise/redux-observable
    li redux-pack
    
section
  img(src="~./images/redux-saga.png" style="width: 400px;")

section
  h3 redux-saga
  ul
    li Used to manage application side effects (asynchronous server calls, accessing local storage, etc.)
    li Implemented as Redux middleware
    li Uses ES6 Generators to make async code easier to read, manage, and test
  a(href="https://mike-plummer.github.io/redux-sagas-presentation/") Check this out for more info

section
  h3 Redux setup
  script(type="text/plain", class="language-js", style="width: 100%;").

    import axios from 'axios'

    const CALL_API = `app/actions/callApi`
    const CALL_API_SUCCESS = `app/actions/callApiSuccess`
    const CALL_API_FAILURE = `app/actions/callApiFailure`

    const callApi = () => { return { type: CALL_API } }
    const callApiSuccess = data => {  return { type: CALL_API_SUCCESS, payload: { data } } }
    const callApiFailure = error => { return { type: CALL_API_FAILURE, payload: error, error: true } }

    const fetchApiData = () => axios.get('http://yourservice.example.com/api/data')

section
  h3 Create the saga
  p Notice the asterisk (*) - this creates a generator function
  script(type="text/plain", class="language-js" style="width: 100%;").
    // sagas.js
    import { takeLatest, call, put } from 'redux-saga/effects'

    export function* watchCallApiRequest() {
      yield takeLatest(CALL_API_REQUEST, workCallApiRequest);
    }

    function* workCallApiRequest() {
      try {
        const response = call(fetchApiData)
        yield put(callApiSuccess, response.data)
      } catch (error) {
        yield put(callApiError, error)
      }
    }


section
  h3 How it works (cont.)
  p Apply the middleware to the Redux store
  script(type="text/plain", class="language-js", style="width: 100%;").
    import { createStore, applyMiddleware } from 'redux'
    import createSagaMiddleware from 'redux-saga'

    import reducer, {createApi} from './reducers'
    import { watchCallApiRequest } from './sagas'

    // create the saga middleware
    const sagaMiddleware = createSagaMiddleware()
    // mount it on the Store
    const store = createStore(
      reducer,
      applyMiddleware(sagaMiddleware)
    )

    // then run the saga
    sagaMiddleware.run(watchCallApiRequest)

    // dispatch the action
    store.dispatch(createApi)

section
  h3 Testing
  p.
    Using <a href="https://github.com/jfairbank/redux-saga-test-plan">redux-saga-test-plan</a>
  script(type="text/plain", class="language-js", style="width: 100%;").
    import { testSaga } from 'redux-saga-test-plan'
    import { watchCallApiRequest } from './sagas'

    describe('Call API saga test', () => {
      it('should successfully call the API', () => {
        const action = callApi()
        const saga = testSaga(watchCallApiRequest)
        const data = { id: 12345 }
        saga
          .next()
          .take(API_REQUEST)
          .next(action)
          .call(fetchApiData)
          .next(data)
          .put(callApiSuccess(data))
          .next()
          .finish()
          .isDone()
      })
    })

section
  h3 Other libraries
  li
    a(href="https://github.com/redux-utilities/redux-promise") redux-promise
  li
    a(href="https://github.com/agraboso/redux-api-middleware") redux-api-middleware
  li
    a(href="https://www.npmjs.com/package/redux-async") redux-async
  li
    a(href="https://redux-observable.js.org") redux-observable
