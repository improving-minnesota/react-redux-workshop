section
  h1 Routing

section
  h2 Legacy Routing
  p Legacy webapps were composed of multiple HTML/JSP/PHP pages
  p Browser would load new page for location transitions

section
  h2 Single Page Application
  p React (and Angular and Vue) apps tend to be Single Page Apps (SPAs)
  p This means there is no browser reload when moving between locations, it just hides some components and renders others

section
  p Since our backend doesn't serve different "pages", how do we link URLs to the displayed content in our app?
  ul
    li.monospace <span class="component red">/</span>
    li.monospace <span class="component red">/login</span>
    li.monospace <span class="component red">/secure/employees</span>
    li.monospace <span class="component red">/secure/timesheets</span>


- var routeTransition = "<span style='color:#999'>=></span>";
section
  p Modern JS frameworks<br/>(Angular, Ember, React, Vue.js)<br/>handle this client-side via Routing
  p.
    These all use the browser's <a href='https://developer.mozilla.org/en-US/docs/Web/API/History'>History API</a>
    <br/>to transition the application
  ul(style="list-style-type:none")
    li.monospace
      p <span class="component red">/#inbox</span> !{routeTransition} <span class="component red">/#sent</span> <br/>
    li.monospace
      p <span class="component red">/opi</span> !{routeTransition} <span class="component red">/objectpartners</span>
    li.monospace
      p <span class="component red">/moments?cat=1</span> !{routeTransition} <span class="component red">/moments?cat=2</span>

section
  h1.lower react-router
  p Declarative routing for React via components
  p
    a(href="https://github.com/ReactTraining/react-router") github react-router

section
  h3 react-router
  ul
    li Helps us control the state of our application based on the URL
    li Maintains the browser history within the app
    li A Route defines that a React Component should be rendered when the URL meets certain conditions
    li Multiple sibling/child Routes can be controlled simultaneously
    li Routes provide info to components via <span class="component red">props</span>

section
  h2 react-router components we'll be covering...

section
  h2.lower.component Router
  p Connects navigation (back, forward, lateral) and location logic with the runtime environment
  ul
    li Five different implementations depending on environment your app will run in
    li Single instance, typically directly underneath the application root
    li All other react-router components have to render within a Router

section
  h2.lower Common Router Implementations
  h3.lower.component BrowserRouter
  p Uses the HTML5 history API to keep your UI in sync with the URL - acts as interface with user's Browser
  h3.lower.component MemoryRouter
  p Manages navigation & location in-memory, no linkage with runtime environment (ideal for unit tests)

section
  h2.lower.component Route
  ul
    li Defines a segment of the UI that should be rendered when the Router location matches a specific value
    li Can have sibling & nested Routes
    li Can pass down path/query params & state into rendered components ('/app/project/1234' => projectId={1234})

section
  h3.plain Route config properties we'll cover
  script(type="text/plain", class="language-jsx").
    <Route exact path="/employees" component={Employees}/>
    <Route path='/employees/detail/:_id' component={EmployeesDetail} />
    <Route path='/employees/create' component={EmployeesCreate} />

section
  h3.lower path
  ul
    li Pattern used to match this Route against the current location
    li Based on Express-style path strings
      ul
        li e.g. <span class="component red">/employees/:id</span>
        li npm
          a(href="https://www.npmjs.com/package/path-to-regexp")  path-to-regexp
    li.
      If multiple routes match, each will get rendered<br/>
      &nbsp;(unless defined inside a <span class="component red">switch</span>)

    li If path not defined, the route will always render

section
  h3.lower component
  ul
    li Specify a single React component to render
    li Passes down all available route props
  script(type="text/plain", class="language-jsx").
    <Route exact path="/employees" component={Employees}/>

section
  h3.lower render
  p Alternative to 'component', define inline function that decides what to render or transform props
  script(type="text/plain", class="language-jsx").
    <Route
      path="/employees/detail/:id"
      render={(props) => {
        const { id } = props.match;
        return id ? <EmployeesDetail employeeId={id} /> : null;
      }}
    />

section
  h3.lower exact &amp; strict
  ul
    li.
      <span class="component red">exact</span> - only matches if an
      <span style="font-style:italic">exact</span> match
    li.
      If <span class="component red">exact</span> is omitted, a route path of <span class="component red">/employees</span>
      will match a URL of <span class="component red">/employees/**</span>
    li.
      <span class="component red">strict</span> - requires the trailing slash
      <span style="font-style:italic">exact</span> match
    li.
      Check the <a href="https://reacttraining.com/react-router/web/api/Route/exact-bool">docs</a> for more info

section
  h2.lower.component Redirect
  p Navigates to a new location.
  ul
    li Can use to handle legacy links, invalid/forbidden access, etc
    li ...or as a fallback , like for a bad URL (usually using "switch")
    script(type="text/plain", class="language-jsx").
      <Redirect from='/employee-list' to='/employees' />
      {!userAuthenticated && <Redirect to='/login' />}
      {invalidEmployeeId && <Redirect to='/employees' />}

section
  h2.lower.component Switch
  p Renders the first child Route/Redirect that matches.<br/><br/>
  script(type="text/plain", class="language-jsx", style="width: 100%;").
    <Switch>
      <Redirect from='/employee-list' to='/employees'/>

      <Route exact path="/employees" component={Employees}/>
      <Route path='/employees/details/:_id' component={EmployeeDetail} />

      {/* If nothing above matched then redirect (default) */}
      <Redirect to="/" />
    </Switch>

section
  h2.lower.component Link
  p Special <span class="component red">&lt;a&gt;</span> tag that integrates with the Router
  ul
    li Notifies the Router of the new desired location
    li Router will re-evaluate Routes to decide which ones to show/hide

section
  h3.lower Link Examples
  script(type="text/plain", class="language-jsx", style="width:100%").
    <Link className={projectsClasses} to="projects">Projects</Link>
    <Link to={`/employees/${id}`} replace>Employees</Link>
    <Link className={timesheetsClasses} to={{
        pathname: '/timesheets',
        search: '?sort=startDate',
        hash: '#id-12345',
        state: { highlightUser: this.state.user._id }
    }}>Timesheets</Link>

section
  h2.lower.component NavLink
  ul
    li Specialized version of <span class="component red">Link</span>
    li Knows when the route it links to is active
    li Dynamic
      span.component.red  activeClassName/activeStyle

section
  h2 Using react-router in your components
  script(type="text/plain", class="language-jsx").
    class MyComponent extends Component {
      ...
    }

    // Injects react-router props into MyComponent
    export default withRouter(MyComponent);

section
  h2.lower withRouter Props
  p Components receive the following props from Router
  ul
    li
      span.component.red match
    li 
      span.component.red location
    li 
      span.component.red history

section
  h3.lower match
  p Object containing information about how the Route matched the URL.
  ul
    li
      <span class="component red">path</span> - Path pattern on the Route that matched
      <br/>
      span(style="margin-left:1em; color:#656565;") e.g.
        span.component(style="font-size:0.95em;") /employee/:id
    li
      <span class="component red">url</span> - URL segment that was matched
      <br/>
      span(style="margin-left:1em;color:#656565;") e.g.
        span.component(style="font-size:0.95em;") /employee/2
    li
      <span class="component red">params</span> - key/values for the dynamic parts of URL
      <br/>
      span(style="margin-left:1em;color:#656565;")
        span.component(style="font-size:0.95em;") /employee/2 =>/employee/:id => {id:2}
    li
      <span class="component red">isExact</span> - true if the entire URL was matched

section
  h3.lower location
  p Represents where the app is, was or will be.
  script(type="text/plain", class="language-jsx").
    {
      key: 'd34cf',
      pathname: '/employees'
      search: '?sortBy=totalHours',
      hash: '#id-1234',
      state: {
        [userDefined]: true
      }
    }

section
  p Where we are
  p.component.red this.props.location
  p Where we were
  p.component.red this.props.history...
  p Where we are going
  script(type="text/plain", class="language-jsx").
    <Link to={location}>link to whatever</Link>

section
  h1
    a(href="/labs/routing-and-components") Lab 03
  h2 Routing and Component Composition
