section
  h2 Advanced Topics

section
  h2 Combining Reducers

section
  h3 Combining Reducers
  p Redux accepts a single root reducer
  p As applications get big this reducer becomes unwieldy

section
  script(type="text/plain", class="language-jsx", style="width:100%").
    import data from './data.reducer.js';
    import user from './user.reducer.js';

    const reducer = combineReducers(data, user);

  script(type="text/plain", class="language-jsx", style="width:100%").
    {
      data: { ... },
      user: { ... }
    }

section
  h2 Middleware

section
  h3 Middleware
  h5 Think of it as a Redux Interceptor
  ul
    li Used to run code after an action is dispatched but before it gets to the reducer
    li Multiple middlewares can be applied at once (chained)
    li Can inspect actions and state, modify/swallow actions in-flight, trigger secondary actions, etc.

section
  h3 Middleware
  ul
    li You can create your own middleware if you want
    li ...but normally you'll just be applying popular third-party middlware libraries

section
  h3 Middleware - Simple Logger
  script(type="text/plain", class="language-jsx", style="width:100%").
    const logger = store => next => action => {
      console.log('ACTION =>', action)
      let result = next(action)
      console.log('NEXT =>' , store.getState())
      return result
    }

    export default logger;

section
  h3 Middleware in action
  script(type="text/plain", class="language-jsx", style="width:100%").
    import { createStore, combineReducers, applyMiddleware } from 'redux'
    import { agentReducer } from 'agent/modules'
    import { cyborgReducer } from 'cyborg/modules'
    import logger from 'middleware/logger'

    const reducers = combineReducers(agentReducer, cyborgReducer)

    const store = createStore(
      reducers,
      applyMiddleware(logger)
    )

    export default store


section
  h3 How do we get data from a REST API?
  img(src="https://media.giphy.com/media/a5viI92PAF89q/giphy.gif")

section
  h2 Async Actions

section
  h3 Async Actions
  ul
    li Important events when you call an async action
    ul
      li.fragment When a call starts
      li.fragment When a call succeeds
      li.fragment When a call fails

section
  h3 Async Actions
  ul
    li Therefore, you need three actions tell the reducer(s):
    ul
      li When an async request starts
      li When the request succeeds
      li When the request fails

section
  h3 Async Actions
  script(type="text/plain", class="language-jsx", style="width:100%").
    // separate types
    { type: 'FETCH_AGENTS_REQUEST' }
    { type: 'FETCH_AGENTS_FAILURE', error: 'Oops' }
    { type: 'FETCH_AGENTS_SUCCESS', response: { ... } }

    // status field
    { type: 'FETCH_AGENTS' }
    { type: 'FETCH_AGENTS', status: 'error', error: 'Oops' }
    { type: 'FETCH_AGENTS', status: 'success', response: { ... } }

section
  h2 Async Action Creators

section
  h3 Async Action Creators
  ul
    li.
      One popular way to create an async action creator is to use a <span class="component red">thunk</span>
      using the <span class="component red">react-thunk</span> middleware
    li Alternate mechanisms exist
      ul
        li.fragment redux-saga
        li.fragment redux-pack
        li.fragment etc.

section
  h3 Thunks in Redux
  ul
    li.
      Action creators return a function with <span class="component red">dispatch</span> as a single argument
    li.
      The <span class="component red">react-thunk</span> middleware knows how to handle action creators that return a function
      and passes the store's <span class="component red">dispatch()</span> to the function
    li.
      The function called by the middleware returns a value, like a <span class="component red">Promise</span> object.

section
  h3 Thunk example
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    import axios from 'axios'

    export const FETCH_AGENTS_REQUEST = 'FETCH_AGENTS_REQUEST'
    export const FETCH_AGENTS_FAILURE = 'FETCH_AGENTS_FAILURE'
    export const FETCH_AGENTS_SUCCESS = 'FETCH_AGENTS_SUCCESS'

    const requestAgents = () => {
      return {
        type: FETCH_AGENTS_REQUEST
      }
    }

    const requestAgentsSuccess = agents => {
      return {
        type: FETCH_AGENTS_SUCCESS,
        payload: agents
      }
    }

    const requestAgentsError = error => {
      return {
        type: FETCH_AGENTS_FAILURE,
        error: error
      }
    }

section
  h3 Thunk example (cont.)
  script(type="text/plain", class="language-jsx", style="width:100%").
    export const fetchAgents = () => {
      return dispatch => {
        dispatch(requestAgents())
        return axios.get('api/agents')
          .then(response => response.data)
          .then(agents => dispatch(requestAgentsSuccess(agents)))
          .catch(error => dispatch(requestAgentsError(error)))
      }
    }

section
  h3 Caveat(s)
  h4.fragment Redux can be challenging to begin to wrap your head around
  h4.fragment The benefits are worth it
  h4.fragment Most applications of non-trivial size will benefit from Redux
