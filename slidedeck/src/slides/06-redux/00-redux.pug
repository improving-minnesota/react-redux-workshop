section
  h1 Redux

section
  h2 What is Redux?
  p A place to store long-lived data outside of React Components
  p ...and a formalized way to modify that data

section
  h2 Three major concepts

section
  h3 Store
  ul
    li Single, application-wide data store
    li Contains all Redux-managed data
    li Read-only (for consumers)

section
  h3 Action
  ul
    li Trigger to tell Redux that something happened
    li Actions can be system- or user-generated
    li Contain a "type" and an optional payload
    li Best practice to establish a convention or use tools like
      a(href="https://github.com/redux-utilities/flux-standard-action")  Flux Standard Actions

section
  h3 Action
  script(type="text/plain", class="language-jsx", style="width:100%").
    const anExampleAction = {
      type: 'USER_LOGIN',
      payload: {
        userId: 'blorg'
      }
    };

  script(type="text/plain", class="language-jsx", style="width:100%").
    const anExampleAction = {
      type: 'USER_LOGIN',
      userId: 'blorg'
    };

section
  h3 Reducer
  ul
    li Notified of all actions and decides what (if any) updates to make to Redux State
    li Returns an updated version of state (or current state if no updates)
    li Is a "pure function"

section
  h3 What is a pure function?
  p A function that has no interactions outside its own scope
  script(type="text/plain", class="language-js").
    function add(a, b) {
      return a + b;
    }

    add(2, 2); // always 4

section
  h3 Reducer
  script(type="text/plain", class="language-jsx", style="width:100%").
    const initialState = {
      agents: []
    };

    const agentReducer = (state = initialState, action) => {
      switch (action.type) {
        case 'ADD_EMPLOYEE':
          return {
            ...state,
            agents: [...state.agents, ...action.payload]
          };
          ...
        default:
          return state;
      }
    };

section
  h3 Data Flow
  h4 Redux follows a strict unidirectional data flow

section
  img(src="~./images/redux-diagram.png")

  p.attribution https://medium.com/the-web-tub/managing-your-react-state-with-redux-affab72de4b1

section
  h2 Benefits

section
  h3 Predictability
  ul
    li State mutation is more predictable by imposing restrictions on updating
    ul
      li Actions are handled in a strict order
      li Actions can be recorded and replayed

section
  h3 Centralization
  ul
    li Centralized state helps avoid race conditions and side effects
    li Allows for centralized handling of concerns
    ul
      li Logging
      li Undo/Redo
      li State persistence

section
  h3 Safety
  p Dozens of components could be attempting to read/write at once
  p State mutation via Redux ensures safe, predictable changes

section
  h2 How does Redux fit in?

section
  h3 How does Redux fit in?
  p Redux is the third major way to store/pass data in React
  ul
    li props: Allow a parent to control a child, hard to share
    li state: Allow a component to control itself, ephemeral
    li Redux: Control multiple components at once, easy to share, can be persisted

section
  h3 Soooo...put everything in Redux?
  p Redux bloats code and has performance impacts
  p Rule of thumb: Do as much with props and state as possible

section
  h2 Working with Redux

section
  h3 Action Creators
  ul
    li Function that creates and returns an action
  script(type="text/plain", class="language-jsx", style="width:100%").
    // action type
    const ADD_AGENT = 'ADD_AGENT'

    // action creator
    const addAgent = agent => {
      return {
        type: ADD_AGENT,
        payload: agent
      }
    }

section
  h3 Immutability
  h4 Good
  script(type="text/plain", class="language-js").
    case 'ADD_EMPLOYEE':
      return {
        ...state,
        agents: [...state.agents, ...action.payload]
      };

  h4 Bad
  script(type="text/plain", class="language-js").
    case 'ADD_EMPLOYEE':
      state.agents = state.agents.concat(action.payload);
      return state;

section
  h3 Immutability
  p
    | Consider using a library like
    a(href="https://github.com/rtfeldman/seamless-immutable")  seamless-immutable
    |  or
    a(href="https://github.com/mweststrate/immer")  immer
    |  to prevent accidental state mutation

section
  iframe(src="https://codesandbox.io/embed/82l7p64vrl", style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;", sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin")
