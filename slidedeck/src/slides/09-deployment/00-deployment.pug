section
  h2 Deployment

section
  img(src="~./images/jenkins-pr.png")

section
  img(src="~./images/jenkins-deploy-preview.png")

section
  a(href="https://jenkins.io/doc/tutorials/build-a-node-js-and-react-app-with-npm/", target="_blank", rel="noopener")
    img(src="~./images/build-nodejs-jenkins.png")

section
  script(type="text/plain", class="language-groovy").
    pipeline {
        agent {
            docker {
                image 'node:8'
                args '-p 3000:3000'
            }
        }
        environment {
            CI = 'true' 
        }
        stages {
            stage('Build') {
                steps {
                    sh 'yarn'
                }
            }
            stage('Test') { 
                steps {
                    sh 'yarn test' 
                }
            }
        }
    }

section
  h3 Deploying a WAR

section
  h4 General idea is to tie into JVM build tool (gradle, maven, etc.)

  p Then you can run npm scripts to build static content and place in correct directory (e.g. yarn build)
section
  h4 If Gradle...

  a(href="https://plugins.gradle.org/plugin/com.moowork.node", rel="noopener", target="_blank")
    img(src="~./images/gradle.png")

section
  script(type="text/plain", class="language-json").
    {
      "scripts": {
        "build": "react-scripts build",
        "postbuild": "cp -r build/. ../some-path"
      }
    }

section
  h4 A note...

  blockquote One thing maybe worth noting is that you need to ensure that Spring Boot (or whatever framework being used in the WAR) sets appropriate caching headers for the UI assets. By default, Spring Security sets `no-cache` for *everything* which kinda sucks for static content like JS files
