section
  h1 React Redux

section
  h2 React Redux
  p Makes binding React components to Redux a little easier

section
  h2 Component types
  ul
    li Presentational (dumb) components
    li Container (smart) components

section
  h3 Presentational components
  ul
    li.fragment Neither know nor care about Redux
    li.fragment Get data from props
    li.fragment.
      Can be implemented as <span class="component red">functional stateless components</span>

section
  h4 Example functional stateless component
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    import React from 'react';
    import PropTypes from 'prop-types';

    const AgentDetails = props => {
      return (
        <li onClick={onClick}>
          {agent.name} - {agent.title}
        </li>
      );
    }

    AgentDetails.propTypes = {
      onClick: PropTypes.func.isRequired,
      agent: PropTypes.shape({
        name: PropTypes.string.isRequired,
        title: PropTypes.string.isRequired,
      })
    };

    export default AgentDetails;

section
  h3 Container components
  p Act as a bridge between React and Redux.
  ul
    li Map data from state onto props
    li Dispatch actions to update the store
    li Typically avoid use of React state or lifecycle methods


section
  h2 Hooking React up to Redux

section
  h3 Connect function
  ul
    li.
      <span class="component red">connect(<br/>[mapStateToProps],<br />[mapDispatchToProps],<br />[mergeProps],<br />[options]<br />)</span>
    li.
      <span class="component red">mapStateToProps</span> and <span class="component red">mapDispatchToProps</span> are the most commonly used parameters

section
  h3 mapStateToProps(state, [ownProps])
  p Maps values from Redux state onto the component's props
  ul
    li Must be a function
    li Subscribes the component to Store updates

section
  h3 mapStateToProps(state, [ownProps])
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    const mapStateToProps = (state) => ({
      agents: state.agents
    });

section
  h3 mapStateToProps(state, [ownProps])
  p Can be used to transform data
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    const mapStateToProps = (state) => ({
      hasAgents: state.agents.length > 0
    });

section
  h3 mapDispatchToProps(dispatch, [ownProps])
  p Maps action creators onto the component's props
  ul
    li Can be an object (typical) or function
    li Wraps action creators so they dispatch actions to Redux

section
  h3 mapDispatchToProps(dispatch, [ownProps])
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    const mapDispatchToProps = {
      onAgentClick: AgentActionCreators.agentClicked
    };

section
  h3 Example presentation component
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    import React from 'react'
    import PropTypes from 'prop-types'
    import AgentDetails from '../components/AgentDetails'

    class AgentList extends React.Component {
      render() {
        const { agents, onAgentClick } = this.props;
        return (
          <ul>
            {agents.map(agent => (
              <AgentDetails agent={agent} onClick={onAgentClick}/>
            ))}
          </ul>
        );
      }
    }

    AgentList.propTypes = {
      agents: PropTypes.array.isRequired,
      onAgentClick: PropTypes.func
    };

    export default AgentList;

section
  h3 Container wraps presentation component with connect()
  script(type="text/plain", class="language-jsx", style="width: 100%; max-height: 700px;").
    import { connect } from 'react-redux'
    import * as AgentActionCreators from '../actions/agentActions'
    import AgentList from '../components/AgentList'

    const mapStateToProps = (state) => ({
      agents: state.agents
    });

    const mapDispatchToProps = {
      onAgentClick: AgentActionCreators.onAgentClick
    };

    const ConnectedAgentList = connect(mapStateToProps, mapDispatchToProps)(AgentList);

    export default ConnectedAgentList;

section
  h3 Presentational vs. container components
  table(style={'font-size': '75%'})
    thead
      tr
        td
        td
          h4 Presentational
        td
          h4 Container
    tbody
      tr
        td Purpose
        td How things look (markup, styles)
        td How things work (data fetching, state updates)
      tr
        td Aware of Redux
        td No
        td Yes
      tr
        td Reads data from
        td props
        td Redux state subscription
      tr
        td Change data by
        td Invoking callbacks from props
        td Dispatching Redux actions
      tr
        td Are written
        td By hand
        td.
          Generated by React Redux via <span class="component red">connect()</span>

section
  h2 Best Practices

section
  h3 Minimize use of 'connect'
  p Can you get the data from a parent via props or maintain it using state?

section
  h3 Keep mapStateToProps lightweight
  p This function is called *every* time that the store is updated
  ul
    li Minimize heavy calculations
    li Definitely don't fetch data here!

section
  h3 Consider using memoization
  p Since mapStateToProps can be called frequently some apps may need to highly optimize these functions
  p State -> prop transformations can be memoized using 'selectors'
  a(href="https://github.com/reduxjs/reselect") reselect

section
  h1
    a(href="/labs/integrating-redux") Lab 04
  h2 Adding Redux to Timesheetz
