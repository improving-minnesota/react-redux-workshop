section
  h1 Redux

section
  h3.lower Three principles
  ul
    li Single source of truth - object tree in a single store
    li State is read-only - can only be changed by dispatching an action
    li Changes are made with pure functions called <span class="component red">reducers</span>

section
  h3 What is a pure function?

  script(type="text/plain", class="language-js").
    function add(a, b) {
      return a + b;
    }

    add(2, 2); // always 4

section
  h2 Benefits

section
  h3 Predictability
  ul
    li State mutation is more predictable by imposing restrictions on updating
    ul
      li Actions are handled in a strict order
      li Actions can be recorded and replayed

section
  h3 Centralization
  ul
    li Centralized state helps avoid race conditions and side effects
    li Allows for centralized handling of concerns
    ul
      li Logging
      li Undo/Redo
      li State persistence

section
  h2 Core Concepts

section
  h3 Actions
  ul
    li.
      Plain JavaScript objects that have a <span class="component red">type</span> that describes the action being performed
    li Objects can contain just about anything else, but we tend to use
      a(href="https://github.com/redux-utilities/flux-standard-action") Flux Standard Actions

section
  h3 Action Creators
  ul
    li Function that creates and returns an action
  script(type="text/plain", class="language-jsx", style="width:100%").
    // action type
    const ADD_AGENT = 'ADD_AGENT'

    // action creator
    function addAgent(agent) {
      return {
        type: ADD_AGENT,
        payload: agent
      }
    }

section
  h3 Reducers
  script(type="text/plain", class="language-jsx", style="width:100%").
    const initialState = {
      agents: []
    }

    function agentReducer(state = initialState, action) {
      switch (action.type) {
        case 'ADD_EMPLOYEE':
          return Object.assign({}, state, {
            examples: state.agents.concat(action.payload)
          })
          ...
      }
    }

section
  h3 Immutability
  h4 Good
  script(type="text/plain", class="language-js").
    return Object.assign({}, state, {
      examples: state.gents.concat(action.payload)
    });

  h4 Bad
  script(type="text/plain", class="language-js").
    return Object.assign(state, {
      examples: state.gents.concat(action.payload)
    });
