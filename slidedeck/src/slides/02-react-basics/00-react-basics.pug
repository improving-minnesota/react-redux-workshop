section
  h1 React
  p
    a(href="http://facebook.github.io/react/index.html") website

section
  h3 A JavaScript library for building user interfaces

section
  h1 JSX

section
  ul
    li JavaScript syntax extension that looks similar to HTML
    li Compiles to actual JavaScript that you'll be able to see during labs

section
  p Returning JSX elements
  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return (
        <header>
          <h1 className="title">Hello {props.name}!</h1>
        </header>
      );
    }

section
  p Returning the same elements without JSX
  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return React.createElement(
        'header',
        {},
        React.createElement(
          'h1',
          { className: 'title' },
          `Hello ${props.name}!`
        )
      );
    }

section
  p React's JSX uses the upper vs. lower case convention to distinguish between React Component classes and HTML tags
  ul
    li UpperCase = Component
    li lowercase = tag

section
  p Since JSX is a superset of JavaScript, identifiers like class and for as XML attribute names is discouraged
  ul
    li <span class="component red">htmlFor</span> instead of <span class="component red">for</span>
    li <span class="component red">className</span> instead of  <span class="component red">class</span>

section
  h1 Virtual DOM

section
  ul
    li Replica of the Browser DOM
    li React redraws the entire screen on change
    li React calculates the minimum amount of changes required
  p
    a(href="https://facebook.github.io/react/docs/reconciliation.html") More info?

section
  h1 React Components

section
  p Components let you split the UI into independent, reusable pieces
  ul
    li Accept arbitrary inputs
    li Return React elements to display in the UI

section
  h2 Functional Component
  ul
    li Is just a JavaScript function
    li Doesn't hold on to any state

section
  script(type="text/plain", class="language-jsx").
    import ReactDOM from 'react-dom';

    function Hello(props) {
      return <h1>Hello {props.name}!</h1>;
    }

    const container = document.getElementById('root');
    ReactDOM.render(<Hello name="Tim" />, container);

section
  h2 Class Component
  ul
    li Is an ES6 class that extends <span class="component red">React.Component</span>
    li Implements a <span class="component red">render()</span> method that returns a React element
    li Can have state

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';
    import ReactDOM from 'react-dom';

    class Hello extends React.Component {
      render() {
        return <h1>Hello {this.props.name}!</h1>;
      }
    }

    const container = document.getElementById('root');
    ReactDOM.render(<Hello name="Tim" />, container);

section
  h2 Component Specifications

section
  p Component Features:
  ul
    li methods
      ul
        li <span class="component red">render()</span>
        li <span class="component red">constructor()</span>
        li lifecycle methods (advanced usage)
    li properties
      ul
        li <span class="component red">props</span>, <span class="component red">defaultProps</span>, & <span class="component red">propTypes</span>
        li <span class="component red">state</span> & <span class="component red">setState()</span>

section
  h2.lower render()
  ul
    li Required
    li Returns a single child component that is either a virtual representation of a native DOM component or composite component
    li Or returns null or false to render nothing

section
  h2.lower render()
  ul
    li Should not modify component state
    li Should return the same result each time it is invoked
    li Should not read from or write to the DOM
    li Work should be performed in <span class="component red">componentDidMount()</span> or the other lifecycle methods

section
  h2.lower constructor()
  ul
    li Invoked at object creation
    li Receives "props"
    li This is a great place to setup your initial state

section
  script(type="text/plain", class="language-jsx").
    constructor(props) {
      super(props)
      this.state = {
        saveText: 'Update',
        employee: {},
        errors: {}
      }
    }

section
  h2 Component Lifecycle
  ul
    li Mounting
    li Updating
    li Unmounting

section
  h2 Mounting
  p These methods are called when an instance of a component is being created and inserted into the DOM:
  ol
    li <span class="component red">constructor()</span>
    li <span class="component red">static getDerivedStateFromProps()</span>
    li <span class="component red">render()</span>
    li <span class="component red">componentDidMount()</span>

section
  h2 Updating:
  p An update can be caused by changes to props or state.
  ol
    li <span class="component red">static getDerivedStateFromProps()</span>
    li <span class="component red">shouldComponentUpdate()</span>
    li <span class="component red">render()</span>
    li <span class="component red">getSnapshotBeforeUpdate()</span>
    li <span class="component red">componentDidUpdate()</span>

section
  h2 Unmounting:
  p This method is called when an instance of a component is being destroyed and removed from the DOM:
  ol
    li <span class="component red">componentWillUnmount()</span>

section
  h2.lower props
  ul
    li contains the props that were defined by the caller of the component
    li has a special prop, <span class="component red">props.children</span>, defined by the child tags in the JSX
    li should never be modified by their own component

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';
    import ReactDOM from 'react-dom';

    class Hello extends React.Component {
      render() {
        return (
          <div>
            <h1>Hello { this.props.name }!</h1>
            { this.props.children }
          </div>
        );
      }
    }

    const container = document.getElementById('root');
    ReactDOM.render(
        <Hello name="Tim">
          <p>Content</p>
        </Hello>,
      container);

    /* renders:
     * <div>
     *   <h1>Hello Tim!</h1>
     *   <p>Content</p>
     * </div>
     */

section
  h2.lower defaultProps
  ul
    li Values in the mapping will be set on <span class="component red">this.props</span> if that prop is not specified by the parent component
    li This is invoked before any instances are created and therefore it can't rely on <span class="component red">this.props</span>

section
  script(type="text/plain", class="language-jsx").
    class Foo extends React.Component {
      render() {
        return <div>{this.props.foo}</div>;
      }
    }
    Foo.defaultProps = {
      foo: ‘Foo’
    };

section
  h2.lower propTypes: {}
  ul
    li The <span class="component red">propTypes</span> object allows you to validate props being passed to your components
    li Defined in a similar matter to <span class="component red">defaultProps</span>

section
  script(type="text/plain", class="language-jsx").
    import PropTypes from ‘prop-types’;
    ...
    Foo.propTypes: {
      max:        PropTypes.number.isRequired,
      maxVisible: PropTypes.number,
      onChange:   PropTypes.func.isRequired
    };

section
  h2.lower state
  ul
    li contains data specific to the component that may change over time
    li should never be mutated directly, use <span class="component red">setState()</span> instead

section
  h2.lower setState()
  ul
    li queues up changes to <span class="component red">state</span>, tells React that the component and its children must be re-rendered
    li executes asynchronously, a callback may be provided that will execute on update

section
  h2 JSX Expression Bindings
  p Embeds any javascript expression in JSX by wrapping it in curly braces
  script(type="text/plain", class="language-jsx").
    // string value (escaped automatically)
    <div>{ `Hello ${this.props.name}!` }</div>

    // attribute value
    <div onClick={this.props.handleClick} />

    // element
    const element = <p>description</p>;
    <div>{ element }</div>

    // elements
    const elements = [ <h1>title</h1>, <Component text="ex" /> ];
    <div>{ elements }</div>

section
  h1.lower Test Helpers

section
  h2.lower Enzyme
  ul
    li Testing utility to assert, manipulate, and traverse your React Components' output
    li (from Airbnb Engineering)
    li
      a(href="http://airbnb.io/enzyme/index.html") airbnb.io/enzyme

section
  script(type="text/plain", class="language-jsx").
    import { shallow, mount } from 'enzyme'

section
  h4.lower Enzyme render testing
  ul
    li <span class="component red">shallow()</span>
      ul
        li Isolate your test by not rendering any child components
    li <span class="component red">mount()</span>
      ul
        li More of an 'integration' test
        li Test child component rendering
        li Test DOM interactions

section
  script(type="text/plain", class="language-jsx").
    element = shallow(
      <EmployeeForm employee={employee}
        errors={errors}
        validate={spies.validate}
        hasErrors={spies.hasErrors}
        toggleAdmin={spies.toggleAdmin}
        onSave={spies.onSave} />
    )

section
  h2.lower Jest Expect
  ul
    li Default set of <span class="component red">expect()</span> assertions included in Jest
    li <span class="component red">toBeTruthy(), toBeFalsy(), toHaveLength(), toEqual()</span>, etc...
    li
      a(href="http://facebook.github.io/jest/docs/expect.html") Jest Expect API

section
  h4.lower Minimal Component Test
  ul
    li Test that the component renders successfully
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toHaveLength(1)

section
  h2.lower Enzyme Matchers
  ul
    li Custom assertion library for Enzyme
    li (from Hudl's Blaine Kasten)
    li
      a(href="https://github.com/blainekasten/enzyme-matchers") github.com/blainekasten/enzyme-matchers

section
  h4.lower toIncludeText(text)
  ul
    li Returns true if the text is anywhere in the component
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toIncludeText('Howdy')

section
  h4.lower toContainReact(jsx)
  ul
    li Returns true if the JSX element is in the component
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toContainReact(<td>Howdy</td>)

section
  h4.lower toHaveProp(propName, value)
  ul
    li To verify that shallow rendered children have correct values passed into them
  script(type="text/plain", class="language-jsx").
    //Find first Route in rendered App
    const route = shallow(<App />).find('Route').at(0)

    expect(route).toHaveProp('path', '/projects')

section
  h2 DOM Query Methods

section
  h4.lower find(selector)
  ul
    li Find all nodes that match the selector
  script(type="text/plain", class="language-jsx").
    //Finds all rows with css class 'odd'
    expect(comp.find('tr.odd')).toHaveLength(1)

section
  h1 Lab 02
  h2 Your First React Component
