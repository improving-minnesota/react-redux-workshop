section
  h1 React
  p
    a(href="http://facebook.github.io/react/index.html") website

section
  h3 A JavaScript library for building user interfaces

section
  h1 JSX

section
  ul
    li JavaScript syntax extension that looks similar to HTML
    li HTML-like syntax compiles to JavaScript function calls with Babel

section
  h3 Our first React component
  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return (
        <header>
          <h1 className="title">Hello {props.name}!</h1>
        </header>
      );
    }

section
  h3 Transpiles (with Babel) to:
  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return React.createElement(
        'header',
        {},
        React.createElement(
          'h1',
          { className: 'title' },
          `Hello ${props.name}!`
        )
      );
    }

section
  p React's JSX uses the upper vs. lower case convention to distinguish between React components vs. HTML tags
  ul
    li UpperCase = Component
    li lowercase = HTML tag
  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return (
        <div>
          <SomeComponent />
        </div>
      );
    }

section
  h3 Gotchas!
  p Since JSX is a superset of JavaScript, identifiers like class and for as attributes (or props!) is discouraged
  ul
    li <span class="component red">htmlFor</span> instead of <span class="component red">for</span>
    li <span class="component red">className</span> instead of  <span class="component red">class</span>

section
  h1 Virtual DOM

section
  ul
    li Replica of the Browser DOM
    li React redraws the entire screen on change
    li Efficiently diffs (and updates!) what is on screen vs. the redrawn DOM
  p
    a(href="https://facebook.github.io/react/docs/reconciliation.html") More info?

section
  h1 React Components

section
  p Components let you split the UI into independent, reusable pieces
  ul
    li Accept arbitrary inputs
    li Return React elements to display in the UI

section
  h2 Functional Component
  ul
    li Is just a JavaScript function
    li Doesn't hold on to any state (we'll come back to this!)

section
  script(type="text/plain", class="language-jsx").
    import ReactDOM from 'react-dom';

    function Hello(props) {
      return <h1>Hello {props.name}!</h1>;
    }

    const container = document.getElementById('root');
    ReactDOM.render(<Hello name="Tim" />, container);

section
  h2 Class Component
  ul
    li Is an ES6 class that extends <span class="component red">React.Component</span>
    li Implements a <span class="component red">render()</span> method that returns a React element
    li Can have state

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';
    import ReactDOM from 'react-dom';

    class Hello extends React.Component {
      render() {
        return <h1>Hello {this.props.name}!</h1>;
      }
    }

    const container = document.getElementById('root');
    ReactDOM.render(<Hello name="Tim" />, container);

section
  h2 Component Specifications

section
  p Component Features:
  ul
    li methods
      ul
        li <span class="component red">render()</span>
        li <span class="component red">constructor()</span>
        li lifecycle methods
    li properties
      ul
        li <span class="component red">props</span>, <span class="component red">defaultProps</span>, & <span class="component red">propTypes</span>
        li <span class="component red">state</span> & <span class="component red">setState()</span>

section
  h2.lower render()
  ul
    li Required
    li Returns a child component or components
    li Or returns null or false to render nothing

section
  h2.lower render()
  ul
    li Does not mutate component state
    li Should return the same result each time it is invoked (rendering consistency!)
    li Should not read from or write to the DOM

section
  h2.lower constructor()
  ul
    li Invoked at object creation
    li Receives "props"
    li This is a great place to setup your initial state

section
  script(type="text/plain", class="language-jsx").
    constructor(props) {
      super(props)
      this.state = {
        saveText: 'Update',
        employee: {},
        errors: {}
      }
    }

section
  h2 Component Lifecycle
  ul
    li Mounting
    li Updating
    li Unmounting

section
  h2 Mounting
  p These methods are called when an instance of a component is being created and inserted into the DOM:
  ol
    li <span class="component red">constructor()</span>
    li <span class="component red">render()</span>
    li <span class="component red">componentDidMount()</span>

section
  h2 Updating:
  p An update can be caused by changes to props or state.
  ol
    li <span class="component red">shouldComponentUpdate()</span>
    li <span class="component red">render()</span>
    li <span class="component red">componentDidUpdate()</span>

section
  h2 Unmounting:
  p This method is called when an instance of a component is being destroyed and removed from the DOM:
  ol
    li <span class="component red">componentWillUnmount()</span>

section
  h2.lower props
  ul
    li contains the props that were defined by the caller of the component
    li has a special prop, <span class="component red">props.children</span>, defined by the child tags in the JSX
    li should never be modified by consuming component

section
  h2.lower props.children

  script(type="text/plain", class="language-jsx").
    function Hello(props) {
      return (
        <div>
          {props.children}
        </div>
      );
    }

    <Hello><h1>Hello World</h1></Hello>

section
  h2.lower defaultProps
  ul
    li Prop defaults (as name would imply) will be set if not explicitly passed by parent component

section
  script(type="text/plain", class="language-jsx").
    class Hello extends React.Component {
      render() {
        return <h1>Hello {this.props.name}</h1>;
      }
    }

    Hello.defaultProps = {
      name: 'World'
    };

section
  h2.lower propTypes: {}
  ul
    li The <span class="component red">propTypes</span> object allows you to validate props being passed to your components
    li Defined in a similar manner to <span class="component red">defaultProps</span>
    li Think of it like your component's API!

section
  script(type="text/plain", class="language-jsx").
    import PropTypes from ‘prop-types’;
    ...
    Foo.propTypes: {
      max:        PropTypes.number.isRequired,
      maxVisible: PropTypes.number,
      onChange:   PropTypes.func.isRequired
    };

section
  h2.lower state
  ul
    li contains data specific to the component that may change over time
    li should never be mutated directly, use <span class="component red">setState()</span> instead

section
  h2.lower setState()
  ul
    li batches changes to <span class="component red">state</span>, tells React that the component and its children must be re-rendered
    li executes asynchronously, a callback may be provided that will execute on update

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';

    export class Counter extends React.Component {
      constructor(props) {
        super(props);

        this.state = { count: 0 };
      }

      decrement() {
        this.setState(state => ({
          count: state.count - 1
        }));
      }

      increment() {
        this.setState(state => ({
          count: state.count + 1
        }));
      }

      render() {
        return (
          <div>
            <h1>{this.state.count}</h1>
            <button onClick={this.decrement}>-</button>
            <button onClick={this.increment}>+</button>
          </div>
        );
      }
    }

//- TODO: add a live example here
