section
  h1 React
  p See
    a(href="http://facebook.github.io/react/index.html")  website
    |  for Documentation

section
  h3 A JavaScript library for building user interfaces

section
  h1 JSX

section
  ul
    li JavaScript syntax extension that looks similar to HTML
    li HTML-like syntax compiles to JavaScript function calls with
      a(href="https://babeljs.io")  Babel

section
  h3 Our first React component
  script(type="text/plain", class="language-jsx").
    const Hello = () => {
      return (
        <header>
          <h1 className="title">Hello World!</h1>
        </header>
      );
    };

section
  h3 Transpiles (with Babel) to:
  script(type="text/plain", class="language-jsx").
    function Hello() {
      return React.createElement(
        'header',
        {},
        React.createElement(
          'h1',
          { className: 'title' },
          'Hello World!'
        )
      );
    };

section
  p React's JSX uses the upper vs. lower case convention to distinguish between React components vs. HTML tags
  ul
    li UpperCase = Component
    li lowercase = HTML tag
  script(type="text/plain", class="language-jsx").
    const Hello = props => {
      return (
        <div>
          <SomeComponent />
        </div>
      );
    };

section
  h3 Gotchas!
  p Since JSX is a superset of JavaScript, identifiers like 'class' and 'for' as attributes (or props!) is discouraged
  ul
    li <span class="component red">htmlFor</span> instead of <span class="component red">for</span>
    li <span class="component red">className</span> instead of  <span class="component red">class</span>

section
  h1 Virtual DOM

section
  ul
    li Replica of the Browser DOM
    li React redraws the entire screen on change
    li Efficiently diffs (and updates!) what is on screen vs. the redrawn DOM
  p
    a(href="https://facebook.github.io/react/docs/reconciliation.html") More info?

section
  h1 React Components

section
  p Components let you split the UI into independent, reusable pieces
  ul
    li Accept arbitrary inputs
    li Return React elements to display in the UI

section
  h2 Functional Component
  ul
    li Is just a JavaScript function
    li Doesn't hold on to any state (we'll come back to this!)

section
  script(type="text/plain", class="language-jsx").
    const Hello = () => {
      return <h1>Hello World!</h1>;
    };

section
  h2 Class Component
  ul
    li Is an ES6 class that extends <span class="component red">React.Component</span>
    li Implements a <span class="component red">render()</span> method that returns a React element
    li Can have state (we'll come back to this!)

section
  script(type="text/plain", class="language-jsx").
    import React from 'react';

    class Hello extends React.Component {
      render() {
        return <h1>Hello World!</h1>;
      }
    }

section
  h2.lower render()
  ul
    li Returns child element(s) to display (which can be other components)
    li Or returns null or false to render nothing
    li Should return the same result each time it is invoked (rendering consistency!)
    li Should not read from or write to the DOM

section
  h2.lower render()
  script(type="text/plain", class="language-jsx").
    render() {
      return (
        <div>
          <p>You can render HTML elements</p>
          <OrCustomComponents/>
          <p>But remember, this runs over and over</p>
          <div>{callAPI("So don't do this")}</div>
        </div>
      );
    }

