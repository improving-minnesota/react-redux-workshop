section
  h1 React
  p
    a(href="http://facebook.github.io/react/index.html") website

section
  h3 A JavaScript library for building user interfaces

section
  h1 Virtual DOM

section
  ul
    li Replica of the Browser DOM
    li React redraws the entire screen on change
    li React calculates the minimum amount of changes required

section
  p
    a(href="https://facebook.github.io/react/docs/reconciliation.html") More info?

section
  p For a bare-bones React component, we need to do 2 things
  ul
    li Extend the React Component class
    li Implement <span class="component red">render()</span>

section
  h2.lower React Component

section
  ul
    li Defines a component class
    li A component implements a render method which returns a single child
    li That child may have an arbitrarily deep child structure

section
  script(type="text/plain", class="language-jsx").
    import React, { Component } from 'react'
    class Hello extends Component {
      render() {...}
    }

    export default Hello

section
  h2 Component Specifications

section
  h2.lower render()
  ul
    li Required
    li Returns a single child component that is either a virtual representation of a native DOM component or composite component

section
  h2.lower render()
  ul
    li You should return null (or false) to indicate that you don't want anything rendered
    li React renders a <span class="component red">&lt;noscript&gt;</span> tag to work with our current diffing algorithm
    li When returning null or false, <span class="component red">ReactDOM.findDOMNode(this)</span> will return null

section
  h2.lower render()
  ul
    li Should be pure
    li Should not modify component state
    li Should return the same result each time it is invoked
    li Should not read from or write to the DOM
    li Work should be performed in <span class="component red">componentDidMount()</span> or the other lifecycle methods

section
  h2.lower constructor
  ul
    li Invoked at object creation
    li Receives "props"
    li This is a great place to setup your initial state

section
  script(type="text/plain", class="language-jsx").
    constructor(props) {
      super(props)
      this.state = {
        saveText: 'Update',
        employee: {},
        errors: {}
      }
    }

section
  h2.lower defaultProps
  ul
    li Values in the mapping will be set on <span class="component red">this.props</span> if that prop is not specified by the parent component
    li This is invoked before any instances are created and therefore it can't rely on <span class="component red">this.props</span>

section
  script(type="text/plain", class="language-jsx").
    class Foo extends React.Component {
        render() {
            return (<div>{this.props.foo}</div>)
        }
    }
    Foo.defaultProps = {
        foo: ‘Foo’
    }

section
  h2.lower propTypes: {}
  ul
    li The <span class="component red">propTypes</span> object allows you to validate props being passed to your components
    li Defined in a similar matter to <span class="component red">defaultProps</span>

section
  script(type="text/plain", class="language-jsx").
    import PropTypes from ‘prop-types’
    ...
    Foo.propTypes: {
       max:        PropTypes.number.isRequired,
       maxVisible: PropTypes.number,
       onChange:   PropTypes.func.isRequired
    }

section
  h1 JSX

section
  ul
    li JavaScript syntax extension that looks similar to XML
    li Compiles to actual JavaScript that you'll be able to see during labs

section
  script(type="text/plain", class="language-jsx").
    render() {
      return (
        <div className="ui message">
          <div className="ui huge header">{this.state.greeting}</div>
          <div className="ui large header">{this.props.friend}</div>
        </div>
      );
    }

section
  p React's JSX uses the upper vs. lower case convention to distinguish between local component classes and HTML tags
  ul
    li UpperCase = Component
    li lowercase = tag

section
  p Since JSX is a superset of JavaScript, identifiers like class and for as XML attribute names is discouraged
  ul
    li <span class="component red">htmlFor</span> instead of <span class="component red">for</span>
    li <span class="component red">className</span> instead of  <span class="component red">class</span>

section
  h2 Data: State vs. Props

section
  ul
    li <span class="component red">props</span> are the data you pass into your component via attributes
    li Used for application data that you need to display or manage with your component

section
  ul
    li <span class="component red">state</span> is your component's internally scoped ... state
    li Used for the behavior of your component: open, disabled, submitted, etc.

section
  ul
    li One exception: "Controller" components
    li They will have a state that represents the application data
    li They pass their state as props to their children components

section
  script(type="text/plain", class="language-jsx").
    render() {
      return (
        <EmployeeForm employee={this.state.employee}
          errors={this.state.errors}
          validateAll={this.validateAll}
          hasErrors={this.hasErrors}
          saveText={this.state.saveText}
          onSave={this.saveEmployee}
          validate={this.validate}
          toggleAdmin={this.toggleAdmin} />
      )
    }

section
  h2 Component Lifecycle
  ul
    li Mounting
    li Updating
    li Unmounting

section
  h2 Mounting
  p These methods are called when an instance of a component is being created and inserted into the DOM:
  ol
    li <span class="component red">constructor()</span>
    li <span class="component red">componentWillMount()</span>
    li <span class="component red">render()</span>
    li <span class="component red">componentDidMount()</span>

section
  h3.lower componentWillMount()
  ul
    li Invoked immediately before mounting occurs -- before <span class="component red">render()</span>
    li If you call <span class="component red">setState()</span> within this method, <span class="component red">render()</span> will see the updated state
    li Since it happens before <span class="component red">render()</span>, <span class="component red">setState()</span> won't cause a "re-render"

section
  h3.lower render()

section
  h3.lower componentDidMount()
  ul
    li Invoked immediately after the initial rendering occurs
    li Setting state via <span class="component red">this.setState()</span> will cause "re-render"
    li Place to integrate with other JS frameworks
    li Place to make AJAX requests

section
  h2 Updating:
  p An update can be caused by changes to props or state.
  ol
    li <span class="component red">componentWillReceiveProps()</span>
    li <span class="component red">shouldComponentUpdate()</span>
    li <span class="component red">componentWillUpdate()</span>
    li <span class="component red">render()</span>
    li <span class="component red">componentDidUpdate()</span>

section
  h4.lower componentWillReceiveProps(object nextProps)
  ul
    li Invoked when a component is receiving new props
    li This method is not called for the initial render

section
  h4.lower componentWillReceiveProps(object nextProps)
  ul
    li Used to react to a prop transition
    li This happens before <span class="component red">render()</span> is called when updating the state using <span class="component red">this.setState()</span>
    li The old props can be accessed via <span class="component red">this.props</span>
    li Calling <span class="component red">this.setState()</span> within this function will not trigger an additional render

section
  h4.lower shouldComponentUpdate(object nextProps, object nextState)
  ul
    li Invoked before rendering when new props or state are being received
    li This method is not called for the initial render or when <span class="component red">forceUpdate</span> is used

section
  h4.lower shouldComponentUpdate(object nextProps, object nextState)
  ul
    li Return <span class="component red">false</span> when you're certain that the transition to the new props and state will not require a component update
    li <span class="component red">render()</span> will be completely skipped until the next state change
    li <span class="component red">componentWillUpdate()</span> and <span class="component red">componentDidUpdate()</span> will not be called

section
  h4.lower componentWillUpdate(object nextProps, object nextState)
  ul
    li Invoked immediately before rendering when new props or state are being received
    li Not called for the initial render

section
  h4.lower componentWillUpdate(object nextProps, object nextState)
  ul
    li Cannot use <span class="component red">this.setState()</span> in this method
    li If you need to update state in response to a prop change, use <span class="component red">componentWillReceiveProps()</span> instead

section
  h4.lower render()

section
  h4.lower componentDidUpdate(object prevProps, object prevState)
  ul
    li Invoked immediately after the component's updates are flushed to the DOM
    li Not called for the initial render
    li Setting state will cause "re-render"
    li Operate on the DOM when the component has been updated

section
  h2.lower Unmounting:
  h3.lower componentWillUnmount()
  ul
    li Invoked immediately before a component is unmounted from the DOM
    li Perform any necessary cleanup in this method
  ul
    li Invalidate timers if necessary
    li Clean up any DOM elements that were created in <span class="component red">componentDidMount()</span>

section
  h1.lower Test Helpers

section
  h2.lower Enzyme
  ul
    li Testing utility to assert, manipulate, and traverse your React Components' output
    li (from Airbnb Engineering)
    li
      a(href="http://airbnb.io/enzyme/index.html") airbnb.io/enzyme

section
  script(type="text/plain", class="language-jsx").
    import { shallow, mount } from 'enzyme'

section
  h4.lower Enzyme render testing
  ul
    li <span class="component red">shallow()</span>
      ul
        li Isolate your test by not rendering any child components
    li <span class="component red">mount()</span>
      ul
        li More of an 'integration' test
        li Test child component rendering
        li Test DOM interactions

section
  script(type="text/plain", class="language-jsx").
    element = shallow(
      <EmployeeForm employee={employee}
        errors={errors}
        validate={spies.validate}
        hasErrors={spies.hasErrors}
        toggleAdmin={spies.toggleAdmin}
        onSave={spies.onSave} />
    )

section
  h2.lower Jest Expect
  ul
    li Default set of <span class="component red">expect()</span> assertions included in Jest
    li <span class="component red">toBeTruthy(), toBeFalsy(), toHaveLength(), toEqual()</span>, etc...
    li
      a(href="http://facebook.github.io/jest/docs/expect.html") Jest Expect API

section
  h4.lower Minimal Component Test
  ul
    li Test that the component renders successfully
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toHaveLength(1)

section
  h2.lower Enzyme Matchers
  ul
    li Custom assertion library for Enzyme
    li (from Hudl's Blaine Kasten)
    li
      a(href="https://github.com/blainekasten/enzyme-matchers") github.com/blainekasten/enzyme-matchers

section
  h4.lower toIncludeText(text)
  ul
    li Returns true if the text is anywhere in the component
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toIncludeText('Howdy')

section
  h4.lower toContainReact(jsx)
  ul
    li Returns true if the JSX element is in the component
  script(type="text/plain", class="language-jsx").
    expect(shallow(<Hello />)).toContainReact(<td>Howdy</td>)

section
  h4.lower toHaveProp(propName, value)
  ul
    li To verify that shallow rendered children have correct values passed into them
  script(type="text/plain", class="language-jsx").
    //Find first Route in rendered App
    const route = shallow(<App />).find('Route').at(0)

    expect(route).toHaveProp('path', '/projects')

section
  h2 DOM Query Methods

section
  h4.lower find(selector)
  ul
    li Find all nodes that match the selector
  script(type="text/plain", class="language-jsx").
    //Finds all rows with css class 'odd'
    expect(comp.find('tr.odd')).toHaveLength(1)

section
  h1 Lab 02
  h2 Your First React Component
